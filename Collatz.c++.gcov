        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2017
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:
        -:   14:#include "Collatz.h"
        -:   15:
        -:   16:using namespace std;
        -:   17:
        -:   18:// ------------
        -:   19:// collatz_read
        -:   20:// ------------
        -:   21:
function _Z12collatz_readRSi called 9 returned 100% blocks executed 83%
        9:   22:int collatz_read(istream &r) {
        -:   23:  int n;
        9:   24:  r >> n;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9:   25:  assert(n > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        9:   26:  return n;
        -:   27:}
        -:   28:
        -:   29:// ------------
        -:   30:// collatz_eval
        -:   31:// ------------
        -:   32:
function _Z12collatz_evalx called 17 returned 100% blocks executed 88%
       17:   33:int collatz_eval(long long n) {
       17:   34:  assert(n > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   35:  long long m;
       17:   36:  long long count = 1;
       17:   37:  long long max = 1;
       17:   38:  int ret = 0;
        -:   39:
        -:   40:  int metaCache[] = {
        -:   41:      1,       2,       3,      6,      7,      9,      18,     19,     25,
        -:   42:      27,      54,      55,     73,     97,     129,    171,    231,    235,
        -:   43:      313,     327,     649,    654,    655,    667,    703,    871,    1161,
        -:   44:      2223,    2322,    2323,   2463,   2919,   3711,   6171,   10971,  13255,
        -:   45:      17647,   17673,   23529,  26623,  34239,  35497,  35655,  52527,  77031,
        -:   46:      106239,  142587,  156159, 216367, 230631, 410011, 511935, 910107, 1676703,
       17:   47:      3030267, 3974407, 4484223};
       17:   48:  if (n < 5000000) {
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
      316:   49:    for (int i = 0; i < (int)sizeof(metaCache)-1; ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      316:   50:      if (n >= metaCache[i] && n < metaCache[i + 1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
       16:   51:        return metaCache[i];
        -:   52:    }
        -:   53:  }
        -:   54:
        1:   55:  long long *lazyCache = new long long[n];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
  6000001:   56:  for (long long i = 0; i < n; ++i) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  6000000:   57:    lazyCache[i] = -1;
        -:   58:  }
        1:   59:  lazyCache[0] = 1;
        -:   60:
  6000001:   61:  for (long long i = 1; i <= n; ++i) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  6000000:   62:    m = i;
 59868760:   63:    while (m > 1) {
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
 26934380:   64:      if (m < n && lazyCache[m - 1] != -1) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
  5999998:   65:        count += lazyCache[m - 1] - 1;
  5999998:   66:        m = 1;
        -:   67:      }
 26934380:   68:      if (m != 1) {
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
 20934382:   69:        if (m % 2 == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
 10469931:   70:          m /= 2;
        -:   71:        else {
 10464451:   72:          m = (3 * m + 1) / 2;
 10464451:   73:          ++count;
        -:   74:        }
 20934382:   75:        ++count;
        -:   76:      }
        -:   77:    }
  6000000:   78:    lazyCache[i - 1] = count;
  6000000:   79:    if (count >= max) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       64:   80:      max = count;
       64:   81:      ret = i;
        -:   82:    }
  6000000:   83:    count = 1;
        -:   84:  }
        1:   85:  assert(ret > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   86:  assert(ret <= n);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   87:  delete[] lazyCache;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        -:   88:  //cout<<"test: "<<ret<<endl;
        1:   89:  return ret;
        -:   90:}
        -:   91:
        -:   92:// -------------
        -:   93:// collatz_print
        -:   94:// -------------
        -:   95:
function _Z13collatz_printRSoi called 9 returned 100% blocks executed 80%
        9:   96:void collatz_print(ostream &w, int m) {
        9:   97:  assert(m > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        9:   98:  w << m << endl;
call    0 returned 100%
call    1 returned 100%
        9:   99:}
        -:  100:
        -:  101:// -------------
        -:  102:// collatz_solve
        -:  103:// -------------
        -:  104:
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 100%
        2:  105:void collatz_solve(istream &r, ostream &w) {
        -:  106:  int t;
        2:  107:  r >> t;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  108:  for (int _ = 0; _ != t; ++_) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:  109:    const int n = collatz_read(r);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  110:    const int m = collatz_eval(n);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  111:    collatz_print(w, m);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  112:  }
function _GLOBAL__sub_I__Z12collatz_readRSi called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        5:  113:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
