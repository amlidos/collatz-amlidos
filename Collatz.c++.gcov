        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2017
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:
        -:   14:#include "Collatz.h"
        -:   15:
        -:   16:using namespace std;
        -:   17:
        -:   18:// ------------
        -:   19:// collatz_read
        -:   20:// ------------
        -:   21:
function _Z12collatz_readRSi called 9 returned 100% blocks executed 83%
        9:   22:int collatz_read(istream &r) {
        -:   23:  int n;
        9:   24:  r >> n;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9:   25:  assert(n > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        9:   26:  return n;
        -:   27:}
        -:   28:
        -:   29:// ------------
        -:   30:// collatz_eval
        -:   31:// ------------
        -:   32:
function _Z12collatz_evalx called 17 returned 100% blocks executed 90%
       17:   33:int collatz_eval(long long n) {
       17:   34:  assert(n > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   35:
        -:   36:  long long metaCache[] = {
        -:   37:      1,       2,       3,       6,       7,       9,       18,      19,
        -:   38:      25,      27,      54,      55,      73,      97,      129,     171,
        -:   39:      231,     235,     313,     327,     649,     654,     655,     667,
        -:   40:      703,     871,     1161,    2223,    2322,    2323,    2463,    2919,
        -:   41:      3711,    6171,    10971,   13255,   17647,   17673,   23529,   26623,
        -:   42:      34239,   35497,   35655,   52527,   77031,   106239,  142587,  156159,
        -:   43:      216367,  230631,  410011,  511935,  626331,  837799,  1117065, 1126015,
       17:   44:      1501353, 1564063, 1723519, 2298025, 3064033, 3542887, 3732423};
       17:   45:  if (n < 3732423) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
      268:   46:    for (long long i = 0; i < (int)sizeof(metaCache) - 1; ++i) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      268:   47:      if (n >= metaCache[i] && n < metaCache[i + 1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
       15:   48:        return metaCache[i];
        -:   49:    }
        -:   50:  }
        -:   51:
        -:   52:  long long m;
        2:   53:  long long count = 1;
        2:   54:  long long max = 1;
        2:   55:  int ret = 0;
        -:   56:
        2:   57:  long long *lazyCache = new long long[n];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
  9750002:   58:  for (long long i = 0; i < n; ++i) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  9750000:   59:    lazyCache[i] = -1;
        -:   60:  }
        2:   61:  lazyCache[0] = 1;
        -:   62:
  9750002:   63:  for (long long i = 1; i <= n; ++i) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  9750000:   64:    m = i;
 97273918:   65:    while (m > 1) {
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
 43761959:   66:      if (m < n && lazyCache[m - 1] != -1) {
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
  9749996:   67:        count += lazyCache[m - 1] - 1;
  9749996:   68:        m = 1;
        -:   69:      }
 43761959:   70:      if (m != 1) {
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
 34011963:   71:        if (m % 2 == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
 17011253:   72:          m /= 2;
        -:   73:        else {
 17000710:   74:          m = (3 * m + 1) / 2;
 17000710:   75:          ++count;
        -:   76:        }
 34011963:   77:        ++count;
        -:   78:      }
        -:   79:    }
  9750000:   80:    lazyCache[i - 1] = count;
  9750000:   81:    if (count >= max) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      127:   82:      max = count;
      127:   83:      ret = i;
        -:   84:    }
  9750000:   85:    count = 1;
        -:   86:  }
        2:   87:  assert(ret > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   88:  delete[] lazyCache;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
        2:   89:  return ret;
        -:   90:}
        -:   91:
        -:   92:// -------------
        -:   93:// collatz_print
        -:   94:// -------------
        -:   95:
function _Z13collatz_printRSoi called 9 returned 100% blocks executed 80%
        9:   96:void collatz_print(ostream &w, int m) {
        9:   97:  assert(m > 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        9:   98:  w << m << endl;
call    0 returned 100%
call    1 returned 100%
        9:   99:}
        -:  100:
        -:  101:// -------------
        -:  102:// collatz_solve
        -:  103:// -------------
        -:  104:
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 100%
        2:  105:void collatz_solve(istream &r, ostream &w) {
        -:  106:  int t;
        2:  107:  r >> t;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  108:  for (int _ = 0; _ != t; ++_) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:  109:    const int n = collatz_read(r);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  110:    const int m = collatz_eval(n);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  111:    collatz_print(w, m);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  112:  }
function _GLOBAL__sub_I__Z12collatz_readRSi called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        5:  113:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
